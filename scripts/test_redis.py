"""
Script de teste para verificar instala√ß√£o do Redis
Execute: python test_redis.py
"""

import redis
import sys
import time

def test_redis_connection():
    """Testa a conex√£o com o Redis"""
    
    print("üî¥ Testando conex√£o com Redis...\n")
    
    try:
        # Tentar conectar
        r = redis.Redis(
            host='localhost', 
            port=6379, 
            decode_responses=True,
            socket_connect_timeout=5
        )
        
        # Teste 1: Ping
        print("1Ô∏è‚É£ Teste de PING...")
        pong = r.ping()
        if pong:
            print("‚úÖ Redis respondeu com PONG!\n")
        else:
            print("‚ùå Redis n√£o respondeu ao PING\n")
            return False
        
        # Teste 2: Set/Get
        print("2Ô∏è‚É£ Teste de SET/GET...")
        r.set('teste_key', 'Ol√° Redis!')
        value = r.get('teste_key')
        if value == 'Ol√° Redis!':
            print(f"‚úÖ Valor armazenado e recuperado: '{value}'\n")
        else:
            print("‚ùå Erro ao armazenar/recuperar valor\n")
            return False
        
        # Teste 3: Expira√ß√£o
        print("3Ô∏è‚É£ Teste de expira√ß√£o (TTL)...")
        r.setex('teste_ttl', 2, 'Valor tempor√°rio')
        ttl = r.ttl('teste_ttl')
        print(f"‚úÖ Chave criada com TTL de {ttl} segundos")
        time.sleep(3)
        expired_value = r.get('teste_ttl')
        if expired_value is None:
            print("‚úÖ Chave expirou corretamente!\n")
        else:
            print("‚ùå Chave n√£o expirou\n")
        
        # Teste 4: Incremento
        print("4Ô∏è‚É£ Teste de incremento...")
        r.set('contador', 0)
        r.incr('contador')
        r.incr('contador')
        counter = r.get('contador')
        if counter == '2':
            print(f"‚úÖ Contador incrementado para: {counter}\n")
        else:
            print("‚ùå Erro no incremento\n")
        
        # Teste 5: Listas
        print("5Ô∏è‚É£ Teste de listas...")
        r.delete('minha_lista')  # Limpar se existir
        r.rpush('minha_lista', 'item1', 'item2', 'item3')
        lista = r.lrange('minha_lista', 0, -1)
        if lista == ['item1', 'item2', 'item3']:
            print(f"‚úÖ Lista criada: {lista}\n")
        else:
            print("‚ùå Erro ao criar lista\n")
        
        # Teste 6: Hash
        print("6Ô∏è‚É£ Teste de hash (objeto)...")
        r.hset('usuario:123', mapping={
            'nome': 'Jo√£o',
            'email': 'joao@email.com',
            'idade': '30'
        })
        usuario = r.hgetall('usuario:123')
        print(f"‚úÖ Hash criado: {usuario}\n")
        
        # Limpar dados de teste
        print("üßπ Limpando dados de teste...")
        r.delete('teste_key', 'contador', 'minha_lista', 'usuario:123')
        print("‚úÖ Dados de teste removidos\n")
        
        # Informa√ß√µes do servidor
        print("üìä Informa√ß√µes do Redis:")
        info = r.info()
        print(f"- Vers√£o: {info.get('redis_version', 'N/A')}")
        print(f"- Mem√≥ria usada: {info.get('used_memory_human', 'N/A')}")
        print(f"- Clientes conectados: {info.get('connected_clients', 'N/A')}")
        print(f"- Uptime: {info.get('uptime_in_days', 'N/A')} dias")
        
        print("\n‚úÖ ‚úÖ ‚úÖ Redis est√° funcionando perfeitamente! ‚úÖ ‚úÖ ‚úÖ")
        return True
        
    except redis.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao Redis!")
        print("\nüìã Verifique se:")
        print("1. O Redis est√° instalado")
        print("2. O servi√ßo est√° rodando")
        print("3. A porta 6379 est√° livre")
        print("\nüí° Dicas:")
        print("- Windows: Use 'docker-compose up -d redis'")
        print("- Linux: Use 'sudo systemctl start redis-server'")
        print("- Docker: Use 'docker run -d -p 6379:6379 redis:alpine'")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {str(e)}")
        return False

def check_redis_installed():
    """Verifica se o Redis est√° instalado"""
    
    import subprocess
    import platform
    
    system = platform.system()
    
    try:
        if system == "Windows":
            # Verificar Docker
            result = subprocess.run(['docker', 'ps'], capture_output=True, text=True)
            if 'redis' in result.stdout:
                print("‚úÖ Redis rodando via Docker")
                return True
        else:
            # Linux/Mac
            result = subprocess.run(['redis-cli', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Redis instalado: {result.stdout.strip()}")
                return True
    except:
        pass
    
    return False

if __name__ == "__main__":
    print("=" * 50)
    print("     TESTE DE INSTALA√á√ÉO DO REDIS")
    print("=" * 50)
    print()
    
    # Verificar instala√ß√£o
    if not check_redis_installed():
        print("‚ö†Ô∏è  Redis pode n√£o estar instalado ou rodando")
        print("üìñ Consulte: docs/REDIS_INSTALLATION_GUIDE.md")
        print()
    
    # Testar conex√£o
    success = test_redis_connection()
    
    print("\n" + "=" * 50)
    
    if not success:
        sys.exit(1)
